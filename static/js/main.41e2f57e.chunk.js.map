{"version":3,"sources":["api/constant.js","api/translator.js","components/HomePage.js","App.js","index.js"],"names":["API_BASE_URL","GET_ALL_CUSTOMER","concat","ADD_CUSTOMER","needToImplementWarning","message","destroy","warn","deleteCustomerMessage","lang","languageSwitch","addNewCustomerMessage","submitButton","debitAmount","depositAmount","tableHeaderName","tableHeaderAddress","tableHeaderPhone","englishInput","hindiInput","formInitialValue","address","id","mobileNumber","name","HomePage","Form","useForm","form","useState","source","setSource","loaded","setLoaded","useLiveSessionState","openAddCustomer","setOpenAddCustomer","selectedRowId","setSelectedRowId","language","showConfirm","setShowConfirm","deleteProgress","setDeleteProgress","selectedData","setSelectedData","openActionTab","setOpenActionTab","useEffect","a","axios","get","then","response","status","data","console","log","catch","error","getAllCustomer","deleteCustomerById","delete","columns","title","key","dataIndex","buttonColor","color","background","border","addCustomer","values","post","style","width","height","type","loading","icon","ReloadOutlined","onClick","PlusOutlined","onRow","record","rowIndex","event","rowKey","dataSource","active","centered","visible","footer","onCancel","destroyOnClose","closable","onFinish","Item","required","placeholder","pattern","maxLength","minLength","htmlType","Text","onConfirm","okButtonProps","DeleteOutlined","EditOutlined","direction","display","alignItems","justifyContent","MinusOutlined","App","setLanguage","checked","setChecked","bordered","Title","defaultChecked","onChange","ReactDOM","render","document","getElementById"],"mappings":"uVAKMA,EAFe,4CAGRC,EAAmBD,EAAaE,OAAO,YAAYA,OAAO,gBAC1DC,EAAeH,EAAaE,OAAO,YAAYA,OAAO,gBAItDE,EAAyB,WAClCC,IAAQC,UACRD,IAAQE,KAAK,4B,uECbJC,EAAwB,SAACC,GAClC,OAAOC,EAAeD,EAAM,qDAAsD,2PAIzEE,EAAwB,SAACF,GAClC,OAAOC,EAAeD,EAAM,mBAAoB,iGAYvCG,EAAe,SAACH,GACzB,OAAOC,EAAeD,EAAM,SAAU,oCAc7BI,EAAc,SAACJ,GACxB,OAAOC,EAAeD,EAAM,eAAgB,6BAInCK,EAAgB,SAACL,GAC1B,OAAOC,EAAeD,EAAM,iBAAkB,uBAIrCM,EAAkB,SAACN,GAC5B,OAAOC,EAAeD,EAAM,gBAAiB,yEAEpCO,EAAqB,SAACP,GAC/B,OAAOC,EAAeD,EAAM,mBAAoB,yEAEvCQ,EAAmB,SAACR,GAC7B,OAAOC,EAAeD,EAAM,yBAA0B,oHAGpDC,EAAiB,SAACD,EAAMS,EAAcC,GACxC,MAAa,UAATV,EACOU,EAEJD,G,QCvCLE,EAAmB,CACrBC,QAAS,GACTC,GAAI,GACJC,aAAc,GACdC,KAAM,IAsNKC,EApNE,WACb,MAAeC,IAAKC,UAAbC,EAAP,oBACA,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA8CC,YAAoB,wBAAwB,GAA1F,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA0CP,mBAAS,IAAnD,mBAAOQ,EAAP,KAAsBC,EAAtB,KACA,EAAmBJ,YAAoB,aAAc,SAA9CK,GAAP,oBACA,GAAsCV,oBAAS,GAA/C,qBAAOW,GAAP,MAAoBC,GAApB,MACA,GAA4CZ,oBAAS,GAArD,qBAAOa,GAAP,MAAuBC,GAAvB,MACA,GAAwCd,mBAAST,GAAjD,qBAAOwB,GAAP,MAAqBC,GAArB,MACA,GAA0ChB,oBAAS,GAAnD,qBAAOiB,GAAP,MAAsBC,GAAtB,MACAC,qBAAU,WAcDhB,GAbe,uCAAG,sBAAAiB,EAAA,sEACbC,IAAMC,IAAIlD,GACXmD,MAAK,SAAUC,GACY,MAApBA,EAASC,SACTrB,GAAU,GACVF,EAAUsB,EAASE,MACnBC,QAAQC,IAAIJ,EAASE,UAG5BG,OAAM,SAAUC,GACbH,QAAQC,IAAIE,MAVD,2CAAH,oDAchBC,GAAiBR,SAEtB,CAACpB,IAGJ,ID1CwBvB,GC0ClBoD,GAAkB,uCAAG,sBAAAZ,EAAA,6DACvBN,IAAkB,GADK,SAEjBO,IAAMY,QFhDkBxC,EEgDWe,EFhDJrC,EAAaE,OAAO,YAAYA,OAAO,oBAAoBA,OAAOoB,KEiDlG8B,MAAK,SAAUC,GACZG,QAAQC,IAAIJ,GACZV,IAAkB,MAErBe,OAAM,SAAUC,GACbH,QAAQC,IAAIE,GACZhB,IAAkB,MACnBS,MAAK,WACJX,IAAe,GACfR,GAAU,GACVc,IAAiB,MAbF,iCF9CM,IAACzB,IE8CP,OAAH,qDAiBlByC,GAAU,CACZ,CACIC,MAAOjD,EAAgBwB,IACvB0B,IAAK,OACLC,UAAW,QAEf,CACIF,MAAO/C,EAAiBsB,IACxB0B,IAAK,eACLC,UAAW,gBAGf,CACIF,MAAOhD,EAAmBuB,IAC1B0B,IAAK,UACLC,UAAW,YAIbC,GAAc,SAACC,GACjB,MAAO,CACHC,WAAYD,EACZE,OAAQF,IASVG,GAAW,uCAAG,WAAOC,GAAP,SAAAvB,EAAA,sEACVC,IAAMuB,KAAKtE,EAAcqE,GAC1BpB,MAAK,SAAUC,GACZG,QAAQC,IAAIJ,MAEfK,OAAM,SAAUC,GACbH,QAAQC,IAAIE,MACbP,MAAK,WACJnB,GAAU,MARF,2CAAH,sDAYjB,OACI,sBAAKyC,MAAO,CAACC,MAAO,OAAQC,OAAQ,QAApC,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,KAAK,UAAUH,MAAOP,GAAY,WAAYW,SAAU9C,EAAQ+C,KAAM,cAACC,EAAA,EAAD,IACtEC,QAAS,WACLhD,GAAU,MAEtB,cAAC,IAAD,CAAQ4C,KAAK,UAAUH,MAAOP,GAAY,WAAYY,KAAM,cAACG,EAAA,EAAD,IAAiBD,QAAS,WAClF7C,GAAmB,IADvB,UD7GY3B,GC+GI8B,GD9GrB7B,EAAeD,GAAM,eAAgB,2DCkHpC,uBACA,uBAAK,uBACJuB,EACG,cAAC,IAAD,CAAOmD,MAAO,SAACC,EAAQC,GACnB,MAAO,CACHJ,QAAS,SAAAK,GACL9B,QAAQC,IAAI2B,GACZ9C,EAAiB8C,EAAO9D,IACxBuB,GAAgBuC,GAChBrC,IAAiB,MAI1BwC,OAAO,KAAKC,WAAY1D,EAAQiC,QAASA,KAAa,cAAC,IAAD,CAAU0B,QAAM,IAG7E,cAAC,IAAD,CAAOC,UAAQ,EAAC1B,MAAOrD,EAAsB4B,IAAWoD,QAASxD,EAAiByD,OAAQ,KACnFC,SAAU,kBAAMzD,GAAmB,IAAQ0D,gBAAc,EAACC,UAAQ,EADzE,SAEI,mCACI,eAAC,IAAD,CACInE,KAAMA,EACNoE,SAnDH,SAACxB,GACdhB,QAAQC,IAAIe,GACZD,GAAYC,GAAQpB,OACpBhB,GAAmB,IA8CP,UAII,cAAC,IAAK6D,KAAN,CAAWzE,KAAM,OAAjB,SACI,cAAC,IAAD,CAAO0E,UAAQ,EAACC,YAAapF,EAAgBwB,QAEjD,cAAC,IAAK0D,KAAN,CAAWzE,KAAM,UAAjB,SACI,cAAC,IAAD,CAAO0E,UAAQ,EAACC,YAAanF,EAAmBuB,QAEpD,cAAC,IAAK0D,KAAN,CAAWzE,KAAM,eAAjB,SACI,cAAC,IAAD,CAAO4E,QAAQ,yBAAuBvB,KAAK,OAAOwB,UAAW,GAAIC,UAAW,GAAIJ,UAAQ,EACjFC,YAAalF,EAAiBsB,QAEzC,cAAC,IAAD,UACI,cAAC,IAAK0D,KAAN,UACI,cAAC,IAAD,CAAQpB,KAAK,UAAU0B,SAAS,SAAhC,SAA0C3F,EAAa2B,iBAO3E,cAAC,IAAD,CAAOmD,UAAQ,EAAC1B,MAAO,eAAC,IAAD,WACnB,cAAC,IAAWwC,KAAZ,UAAmB5D,GAAapB,KAAMtB,OAAO,MAAMA,OAAO0C,GAAarB,cAAcrB,OAAO,OAC5F,cAAC,IAAD,CACI8D,MAAOxD,EAAsB+B,IAC7BoD,QAASnD,IAAeM,GACxB2D,UAAW,kBAAM5C,MACjB6C,cAAe,CAAC5B,QAASpC,IACzBmD,SAAU,WACNpD,IAAe,IANvB,SASI,cAAC,IAAD,CAAQoC,KAAK,UAAUH,MAAOP,GAAY,WAAYY,KAAM,cAAC4B,EAAA,EAAD,IAAmB1B,QAAS,WACpFxC,IAAe,QAGvB,cAAC,IAAD,CAAQoC,KAAK,UAAUH,MAAOP,GAAY,WAAYY,KAAM,cAAC6B,EAAA,EAAD,IAAiB3B,QAAS,WAClF7E,UAEEuF,QAAS7C,GAAe8C,OAAQ,KACnCC,SAAU,WACNpD,IAAe,GACfM,IAAiB,IAElB+C,gBAAc,EAACC,UAAQ,EAvBjC,SAwBI,cAAC,IAAD,CAAOc,UAAU,WAAWnC,MAAO,CAC/BoC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAHpB,SAMI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQnC,KAAK,UAAUH,MAAOP,GAAY,OAAQY,KAAM,cAACkC,EAAA,EAAD,IAAkBhC,QAAS,WAC/E7E,KADJ,SAEIS,EAAY0B,MAChB,cAAC,IAAD,CAAQsC,KAAK,UAAUH,MAAOP,GAAY,SAAUY,KAAM,cAACG,EAAA,EAAD,IAAiBD,QAAS,WAChF7E,KADJ,SAEIU,EAAcyB,iBClK3B2E,MArCf,WACI,IFCsBzG,EEDtB,EAAgCyB,YAAoB,aAAc,SAAlE,mBAAOK,EAAP,KAAiB4E,EAAjB,KACA,EAA8BjF,YAAoB,eAAe,GAAjE,mBAAOkF,EAAP,KAAgBC,EAAhB,KAeA,OAbArE,qBAAU,WAEFmE,EADAC,EACY,MAEA,WAGjB,CAACA,IAOA,eAAC,IAAD,CAAME,UAAU,EAAhB,UACI,cAAC,IAAD,CAAO5C,MAAO,CACVoC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAHpB,SAKI,cAAC,IAAWO,MAAZ,WFtBU9G,EEsBmB8B,EFrBlC7B,EAAeD,EAAM,sBAAuB,2GEwB3C,eAAC,IAAD,WACI,cAAC,IAAW+F,KAAZ,6CADJ,IAC6C,cAAC,IAAD,CAAQgB,eAAgBJ,EAASK,SAftF,SAAkBL,GACdC,EAAWD,MAeH,cAAC,IAAWZ,KAAZ,yBAEJ,uBAAK,uBACL,cAAC,EAAD,QCnCZkB,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.41e2f57e.chunk.js","sourcesContent":["import {message} from \"antd\";\r\n\r\n/*const LOCALHOST=\"http://localhost:8080\"*/\r\nconst PROD_API_URL = \"https://sharma-kirana-store.herokuapp.com\"\r\n\r\nconst API_BASE_URL = PROD_API_URL\r\nexport const GET_ALL_CUSTOMER = API_BASE_URL.concat(\"/api/v1/\").concat(\"customer/get\")\r\nexport const ADD_CUSTOMER = API_BASE_URL.concat(\"/api/v1/\").concat(\"customer/add\")\r\nexport const GET_CUSTOMER_BY_ID = (id) => GET_ALL_CUSTOMER.concat(\"/\").concat(id)\r\nexport const DELETE_CUSTOMER_BY_ID = (id) => API_BASE_URL.concat(\"/api/v1/\").concat(\"customer/delete/\").concat(id)\r\n\r\nexport const needToImplementWarning = () => {\r\n    message.destroy()\r\n    message.warn(\"This is not implemented\")\r\n}","export const deleteCustomerMessage = (lang) => {\r\n    return languageSwitch(lang, \"This will delete customer, do you want to proceed?\", \"यह ग्राहक को हटा देगा, क्या आप आगे बढ़ना चाहते हैं?\")\r\n\r\n}\r\n\r\nexport const addNewCustomerMessage = (lang) => {\r\n    return languageSwitch(lang, \"Add new Customer\", \"नया ग्राहक जोड़ें\")\r\n}\r\n\r\nexport const appHeader = (lang) => {\r\n    return languageSwitch(lang, \"Sharma Kirana Store\", \"शर्मा किराना स्टोर\")\r\n}\r\n\r\nexport const newCustomer = (lang) => {\r\n    return languageSwitch(lang, \"New Customer\", \"नए ग्राहक\")\r\n\r\n}\r\n\r\nexport const submitButton = (lang) => {\r\n    return languageSwitch(lang, \"Submit\", \"ठीक है\")\r\n\r\n}\r\n\r\nexport const deleteCustomer = (lang) => {\r\n    return languageSwitch(lang, \"Delete Customer\", \"ग्राहक हटाएं\")\r\n\r\n}\r\n\r\nexport const editCustomer = (lang) => {\r\n    return languageSwitch(lang, \"Update Customer\", \"ग्राहक अपडेट करें\")\r\n\r\n}\r\n\r\nexport const debitAmount = (lang) => {\r\n    return languageSwitch(lang, \"Debit Amount\", \"उधार\")\r\n\r\n}\r\n\r\nexport const depositAmount = (lang) => {\r\n    return languageSwitch(lang, \"Deposit Amount\", \"जमा\")\r\n\r\n}\r\n\r\nexport const tableHeaderName = (lang) => {\r\n    return languageSwitch(lang, \"Customer Name\", \"ग्राहक का नाम\")\r\n}\r\nexport const tableHeaderAddress = (lang) => {\r\n    return languageSwitch(lang, \"Customer Address\", \"ग्राहक का पता\")\r\n}\r\nexport const tableHeaderPhone = (lang) => {\r\n    return languageSwitch(lang, \"Customer Mobile Number\", \"ग्राहक का मोबाइल नंबर\")\r\n}\r\n\r\nconst languageSwitch = (lang, englishInput, hindiInput) => {\r\n    if (lang === \"hindi\") {\r\n        return hindiInput\r\n    }\r\n    return englishInput\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Button, Form, Input, Modal, Popconfirm, Skeleton, Space, Table, Typography} from \"antd\";\r\nimport {ADD_CUSTOMER, DELETE_CUSTOMER_BY_ID, GET_ALL_CUSTOMER, needToImplementWarning} from \"../api/constant\"\r\nimport axios from \"axios\";\r\nimport {DeleteOutlined, EditOutlined, MinusOutlined, PlusOutlined, ReloadOutlined} from \"@ant-design/icons\";\r\nimport {useLiveSessionState} from 'state-persist';\r\nimport {\r\n    addNewCustomerMessage,\r\n    debitAmount,\r\n    deleteCustomerMessage,\r\n    depositAmount,\r\n    newCustomer,\r\n    submitButton,\r\n    tableHeaderAddress,\r\n    tableHeaderName,\r\n    tableHeaderPhone\r\n} from \"../api/translator\";\r\n\r\nconst formInitialValue = {\r\n    address: \"\",\r\n    id: \"\",\r\n    mobileNumber: \"\",\r\n    name: \"\"\r\n}\r\nconst HomePage = () => {\r\n    const [form] = Form.useForm();\r\n    const [source, setSource] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n    const [openAddCustomer, setOpenAddCustomer] = useLiveSessionState(\"openAddCustomerModal\", false);\r\n    const [selectedRowId, setSelectedRowId] = useState(\"\");\r\n    const [language] = useLiveSessionState(\"uiLanguage\", \"hindi\");\r\n    const [showConfirm, setShowConfirm] = useState(false)\r\n    const [deleteProgress, setDeleteProgress] = useState(false)\r\n    const [selectedData, setSelectedData] = useState(formInitialValue)\r\n    const [openActionTab, setOpenActionTab] = useState(false)\r\n    useEffect(() => {\r\n        const getAllCustomer = async () => {\r\n            await axios.get(GET_ALL_CUSTOMER)\r\n                .then(function (response) {\r\n                    if (response.status === 200) {\r\n                        setLoaded(true)\r\n                        setSource(response.data);\r\n                        console.log(response.data)\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                })\r\n        }\r\n        if (!loaded) {\r\n            getAllCustomer().then()\r\n        }\r\n    }, [loaded])\r\n\r\n\r\n    const deleteCustomerById = async () => {\r\n        setDeleteProgress(true)\r\n        await axios.delete(DELETE_CUSTOMER_BY_ID(selectedRowId))\r\n            .then(function (response) {\r\n                console.log(response)\r\n                setDeleteProgress(false)\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                setDeleteProgress(false)\r\n            }).then(() => {\r\n                setShowConfirm(false)\r\n                setLoaded(false)\r\n                setOpenActionTab(false)\r\n            })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: tableHeaderName(language),\r\n            key: 'name',\r\n            dataIndex: 'name',\r\n        },\r\n        {\r\n            title: tableHeaderPhone(language),\r\n            key: 'mobileNumber',\r\n            dataIndex: \"mobileNumber\"\r\n\r\n        },\r\n        {\r\n            title: tableHeaderAddress(language),\r\n            key: 'address',\r\n            dataIndex: \"address\"\r\n        }\r\n    ];\r\n\r\n    const buttonColor = (color) => {\r\n        return {\r\n            background: color,\r\n            border: color\r\n        }\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        console.log(values);\r\n        addCustomer(values).then()\r\n        setOpenAddCustomer(false)\r\n    };\r\n    const addCustomer = async (values) => {\r\n        await axios.post(ADD_CUSTOMER, values)\r\n            .then(function (response) {\r\n                console.log(response)\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            }).then(() => {\r\n                setLoaded(false)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div style={{width: '100%', height: '100%'}}>\r\n            <Space>\r\n                <Button type=\"primary\" style={buttonColor(\"#d065e6\")} loading={!loaded} icon={<ReloadOutlined/>}\r\n                        onClick={() => {\r\n                            setLoaded(false)\r\n                        }}/>\r\n                <Button type=\"primary\" style={buttonColor(\"#21bf40\")} icon={<PlusOutlined/>} onClick={() => {\r\n                    setOpenAddCustomer(true)\r\n                }}>{newCustomer(language)}</Button>\r\n\r\n            </Space>\r\n\r\n            <br/>\r\n            <br/><br/>\r\n            {loaded ?\r\n                <Table onRow={(record, rowIndex) => {\r\n                    return {\r\n                        onClick: event => {\r\n                            console.log(record)\r\n                            setSelectedRowId(record.id)\r\n                            setSelectedData(record)\r\n                            setOpenActionTab(true)\r\n\r\n                        }\r\n                    };\r\n                }} rowKey=\"id\" dataSource={source} columns={columns}/> : <Skeleton active/>}\r\n\r\n\r\n            <Modal centered title={addNewCustomerMessage(language)} visible={openAddCustomer} footer={null}\r\n                   onCancel={() => setOpenAddCustomer(false)} destroyOnClose closable>\r\n                <>\r\n                    <Form\r\n                        form={form}\r\n                        onFinish={onFinish}\r\n                    >\r\n                        <Form.Item name={\"name\"}>\r\n                            <Input required placeholder={tableHeaderName(language)}/>\r\n                        </Form.Item>\r\n                        <Form.Item name={\"address\"}>\r\n                            <Input required placeholder={tableHeaderAddress(language)}/>\r\n                        </Form.Item>\r\n                        <Form.Item name={\"mobileNumber\"}>\r\n                            <Input pattern=\"[+-]?\\d+(?:[.,]\\d+)?\" type=\"text\" maxLength={10} minLength={10} required\r\n                                   placeholder={tableHeaderPhone(language)}/>\r\n                        </Form.Item>\r\n                        <Space>\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\">{submitButton(language)}</Button>\r\n                            </Form.Item>\r\n                        </Space>\r\n                    </Form>\r\n                </>\r\n            </Modal>\r\n\r\n            <Modal centered title={<Space>\r\n                <Typography.Text>{(selectedData.name).concat(\" (\").concat(selectedData.mobileNumber).concat(\")\")}</Typography.Text>\r\n                <Popconfirm\r\n                    title={deleteCustomerMessage(language)}\r\n                    visible={showConfirm && openActionTab}\r\n                    onConfirm={() => deleteCustomerById()}\r\n                    okButtonProps={{loading: deleteProgress}}\r\n                    onCancel={() => {\r\n                        setShowConfirm(false)\r\n                    }}\r\n                >\r\n                    <Button type=\"primary\" style={buttonColor(\"#cf3429\")} icon={<DeleteOutlined/>} onClick={() => {\r\n                        setShowConfirm(true)\r\n                    }}/>\r\n                </Popconfirm>\r\n                <Button type=\"primary\" style={buttonColor(\"#d49217\")} icon={<EditOutlined/>} onClick={() => {\r\n                    needToImplementWarning()\r\n                }}/>\r\n            </Space>} visible={openActionTab} footer={null}\r\n                   onCancel={() => {\r\n                       setShowConfirm(false)\r\n                       setOpenActionTab(false)\r\n\r\n                   }} destroyOnClose closable>\r\n                <Space direction=\"vertical\" style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                }}>\r\n\r\n                    <Space>\r\n                        <Button type=\"primary\" style={buttonColor(\"red\")} icon={<MinusOutlined/>} onClick={() => {\r\n                            needToImplementWarning()\r\n                        }}>{debitAmount(language)}</Button>\r\n                        <Button type=\"primary\" style={buttonColor(\"green\")} icon={<PlusOutlined/>} onClick={() => {\r\n                            needToImplementWarning()\r\n                        }}>{depositAmount(language)}</Button>\r\n                    </Space>\r\n                </Space>\r\n                {/*<>\r\n                    <Form\r\n                        form={form}\r\n                        onFinish={onFinish}\r\n                    >\r\n                        <Form.Item label={tableHeaderName(language)}  name={\"name\"}>\r\n                            <Input required defaultValue={selectedData.name}/>\r\n                        </Form.Item>\r\n                        <Form.Item label={tableHeaderAddress(language)} name={\"address\"}>\r\n                            <Input required  defaultValue={selectedData.address}/>\r\n                        </Form.Item>\r\n                        <Form.Item label={tableHeaderPhone(language)}  name={\"mobileNumber\"}>\r\n                            <Input pattern=\"[+-]?\\d+(?:[.,]\\d+)?\" type=\"text\" maxLength={10} minLength={10} required  defaultValue={selectedData.mobileNumber}/>\r\n                        </Form.Item>\r\n                        <Space>\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\">{submitButton(language)}</Button>\r\n                            </Form.Item>\r\n                        </Space>\r\n                    </Form>\r\n                </>*/}\r\n            </Modal>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default HomePage;\r\n\r\n","import './App.css';\nimport {Card, Space, Switch, Typography} from 'antd';\nimport HomePage from './components/HomePage';\nimport {useLiveSessionState} from \"state-persist\";\nimport {appHeader} from \"./api/translator\";\nimport {useEffect} from \"react\";\n\nfunction App() {\n    const [language, setLanguage] = useLiveSessionState(\"uiLanguage\", \"hindi\");\n    const [checked, setChecked] = useLiveSessionState(\"switchState\", false);\n\n    useEffect(() => {\n        if (checked) {\n            setLanguage(\"eng\")\n        } else {\n            setLanguage(\"hindi\")\n        }\n// eslint-disable-next-line\n    }, [checked])\n\n    function onChange(checked) {\n        setChecked(checked)\n    }\n\n    return (\n        <Card bordered={false}>\n            <Space style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n            }}>\n                <Typography.Title>{appHeader(language)}</Typography.Title>\n\n            </Space>\n            <Space>\n                <Typography.Text>हिंदी</Typography.Text> <Switch defaultChecked={checked} onChange={onChange}/>\n                <Typography.Text>English</Typography.Text>\n            </Space>\n            <br/><br/>\n            <HomePage/>\n        </Card>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}